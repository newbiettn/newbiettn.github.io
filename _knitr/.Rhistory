geom_vline(xintercept = 0, size = 0.5) +
coord_cartesian(xlim = c(-0.25, 1.5), ylim = c(-0.25, 1.5)) +
theme(legend.title=element_blank()) +
labs(x = "x", y = "y")
ggsave("figs/xor.png")
################################################################################
# BACKPROPAGATION
################################################################################
# Initial theta values
theta_1 <- matrix(c(-1, -1, -1, 1, -1, 1),
ncol = 3, nrow = 2)
theta_2 <- matrix(c(1, 1), ncol = 2)
# Define sigmoid function
g <- function(z) {
return (1/(1 + exp(-z)))
}
# Define threshold function
# g <- function(z) {
#   return (ifelse(z >= 0, 1, 0))
# }
error_log <- data.frame("iter" = numeric(), "val" = numeric())
for (j in 0:10000) {
e <- 0;
eta <- 0.01 #learning rate
for (i in sample(c(1,2,3,4))) {
a_2 <- g(theta_1%*%x[i,])
a_3 <- g(theta_2%*%a_2)
# Define delta_3
delta_3 <- a_3 - y[i,]
# delta_2
delta_2 <- (t(theta_2)%*%delta_3)*(a_2*(1-a_2))
# Mean square error
e <- e + (delta_3)^2
# print(as.character(signif(delta_3)), 2)
theta_1 <- theta_1 - eta*delta_2%*%x[i,]
theta_2 <- theta_2 - eta*t(a_2%*%t(delta_3))
}
e <- sqrt(e/4)
if ((j%%100) == 0) {
error_log <- rbind(error_log, c(j, e))
}
}
names(error_log) <- c("iter", "val")
error_log
################################################################################
# LIBRARY
################################################################################
library(ggplot2)
################################################################################
# GENERATE DATA
################################################################################
# Manually generate x1 AND x2 = y dataset
# x0 is a bias unit and equals to 1
dt <- data.frame(x0 = c(1, 1, 1, 1),
x1 = c(1, 1, 0, 0),
x2 = c(1, 0, 1, 0),
y = c(0, 1, 1, 0))
# Input
x <- as.matrix(dt[,1:3])
# Output
y <- as.matrix(dt[, 4])
################################################################################
# PLOT
################################################################################
ggplot(data = dt,
mapping = aes(x = x1, y = x2, shape = as.factor(y),
colour = as.factor(y))) +
geom_point(size = 5) +
geom_hline(yintercept = 0, size = 0.5) +
geom_vline(xintercept = 0, size = 0.5) +
coord_cartesian(xlim = c(-0.25, 1.5), ylim = c(-0.25, 1.5)) +
theme(legend.title=element_blank()) +
labs(x = "x", y = "y")
ggsave("figs/xor.png")
################################################################################
# BACKPROPAGATION
################################################################################
# Initial theta values
theta_1 <- matrix(c(-1, -1, -2, 1, -1, 1),
ncol = 3, nrow = 2)
theta_2 <- matrix(c(1, 1), ncol = 2)
# Define sigmoid function
g <- function(z) {
return (1/(1 + exp(-z)))
}
# Define threshold function
# g <- function(z) {
#   return (ifelse(z >= 0, 1, 0))
# }
error_log <- data.frame("iter" = numeric(), "val" = numeric())
for (j in 0:10000) {
e <- 0;
eta <- 0.01 #learning rate
for (i in sample(c(1,2,3,4))) {
a_2 <- g(theta_1%*%x[i,])
a_3 <- g(theta_2%*%a_2)
# Define delta_3
delta_3 <- a_3 - y[i,]
# delta_2
delta_2 <- (t(theta_2)%*%delta_3)*(a_2*(1-a_2))
# Mean square error
e <- e + (delta_3)^2
# print(as.character(signif(delta_3)), 2)
theta_1 <- theta_1 - eta*delta_2%*%x[i,]
theta_2 <- theta_2 - eta*t(a_2%*%t(delta_3))
}
e <- sqrt(e/4)
if ((j%%100) == 0) {
error_log <- rbind(error_log, c(j, e))
}
}
names(error_log) <- c("iter", "val")
error_log
theta_1
################################################################################
# LIBRARY
################################################################################
library(ggplot2)
################################################################################
# GENERATE DATA
################################################################################
# Manually generate x1 AND x2 = y dataset
# x0 is a bias unit and equals to 1
dt <- data.frame(x0 = c(1, 1, 1, 1),
x1 = c(1, 1, 0, 0),
x2 = c(1, 0, 1, 0),
y = c(0, 1, 1, 0))
# Input
x <- as.matrix(dt[,1:3])
# Output
y <- as.matrix(dt[, 4])
################################################################################
# PLOT
################################################################################
ggplot(data = dt,
mapping = aes(x = x1, y = x2, shape = as.factor(y),
colour = as.factor(y))) +
geom_point(size = 5) +
geom_hline(yintercept = 0, size = 0.5) +
geom_vline(xintercept = 0, size = 0.5) +
coord_cartesian(xlim = c(-0.25, 1.5), ylim = c(-0.25, 1.5)) +
theme(legend.title=element_blank()) +
labs(x = "x", y = "y")
ggsave("figs/xor.png")
################################################################################
# BACKPROPAGATION
################################################################################
# Initial theta values
theta_1 <- matrix(c(-1.5, 1, 1, -0.5, 1, 1),
ncol = 3, nrow = 2)
theta_2 <- matrix(c(1, 1), ncol = 2)
theta_1
################################################################################
# LIBRARY
################################################################################
library(ggplot2)
################################################################################
# GENERATE DATA
################################################################################
# Manually generate x1 AND x2 = y dataset
# x0 is a bias unit and equals to 1
dt <- data.frame(x0 = c(1, 1, 1, 1),
x1 = c(1, 1, 0, 0),
x2 = c(1, 0, 1, 0),
y = c(0, 1, 1, 0))
# Input
x <- as.matrix(dt[,1:3])
# Output
y <- as.matrix(dt[, 4])
################################################################################
# PLOT
################################################################################
ggplot(data = dt,
mapping = aes(x = x1, y = x2, shape = as.factor(y),
colour = as.factor(y))) +
geom_point(size = 5) +
geom_hline(yintercept = 0, size = 0.5) +
geom_vline(xintercept = 0, size = 0.5) +
coord_cartesian(xlim = c(-0.25, 1.5), ylim = c(-0.25, 1.5)) +
theme(legend.title=element_blank()) +
labs(x = "x", y = "y")
ggsave("figs/xor.png")
################################################################################
# BACKPROPAGATION
################################################################################
# Initial theta values
theta_1 <- matrix(c(-1.5, 1, 1, -0.5, 1, 1),
ncol = 3, nrow = 2, byrow = TRUE)
theta_2 <- matrix(c(1, 1), ncol = 2)
theta_1
theta_2
################################################################################
# LIBRARY
################################################################################
library(ggplot2)
################################################################################
# GENERATE DATA
################################################################################
# Manually generate x1 AND x2 = y dataset
# x0 is a bias unit and equals to 1
dt <- data.frame(x0 = c(1, 1, 1, 1),
x1 = c(1, 1, 0, 0),
x2 = c(1, 0, 1, 0),
y = c(0, 1, 1, 0))
# Input
x <- as.matrix(dt[,1:3])
# Output
y <- as.matrix(dt[, 4])
################################################################################
# PLOT
################################################################################
ggplot(data = dt,
mapping = aes(x = x1, y = x2, shape = as.factor(y),
colour = as.factor(y))) +
geom_point(size = 5) +
geom_hline(yintercept = 0, size = 0.5) +
geom_vline(xintercept = 0, size = 0.5) +
coord_cartesian(xlim = c(-0.25, 1.5), ylim = c(-0.25, 1.5)) +
theme(legend.title=element_blank()) +
labs(x = "x", y = "y")
ggsave("figs/xor.png")
################################################################################
# BACKPROPAGATION
################################################################################
# Initial theta values
theta_1 <- matrix(c(-1.5, 1, 1, -0.5, 1, 1),
ncol = 3, nrow = 2, byrow = TRUE)
theta_2 <- matrix(c(-2, 1), ncol = 2)
# Define sigmoid function
g <- function(z) {
return (1/(1 + exp(-z)))
}
# Define threshold function
# g <- function(z) {
#   return (ifelse(z >= 0, 1, 0))
# }
error_log <- data.frame("iter" = numeric(), "val" = numeric())
for (j in 0:10000) {
e <- 0;
eta <- 0.01 #learning rate
for (i in sample(c(1,2,3,4))) {
a_2 <- g(theta_1%*%x[i,])
a_3 <- g(theta_2%*%a_2)
# Define delta_3
delta_3 <- a_3 - y[i,]
# delta_2
delta_2 <- (t(theta_2)%*%delta_3)*(a_2*(1-a_2))
# Mean square error
e <- e + (delta_3)^2
# print(as.character(signif(delta_3)), 2)
theta_1 <- theta_1 - eta*delta_2%*%x[i,]
theta_2 <- theta_2 - eta*t(a_2%*%t(delta_3))
}
e <- sqrt(e/4)
if ((j%%100) == 0) {
error_log <- rbind(error_log, c(j, e))
}
}
names(error_log) <- c("iter", "val")
error_log
################################################################################
# LIBRARY
################################################################################
library(ggplot2)
################################################################################
# GENERATE DATA
################################################################################
# Manually generate x1 AND x2 = y dataset
# x0 is a bias unit and equals to 1
dt <- data.frame(x0 = c(1, 1, 1, 1),
x1 = c(1, 1, 0, 0),
x2 = c(1, 0, 1, 0),
y = c(0, 1, 1, 0))
# Input
x <- as.matrix(dt[,1:3])
# Output
y <- as.matrix(dt[, 4])
################################################################################
# PLOT
################################################################################
ggplot(data = dt,
mapping = aes(x = x1, y = x2, shape = as.factor(y),
colour = as.factor(y))) +
geom_point(size = 5) +
geom_hline(yintercept = 0, size = 0.5) +
geom_vline(xintercept = 0, size = 0.5) +
coord_cartesian(xlim = c(-0.25, 1.5), ylim = c(-0.25, 1.5)) +
theme(legend.title=element_blank()) +
labs(x = "x", y = "y")
ggsave("figs/xor.png")
################################################################################
# BACKPROPAGATION
################################################################################
# Initial theta values
theta_1 <- matrix(c(-1.5, 1, 1, -0.5, 1, 1),
ncol = 3, nrow = 2, byrow = TRUE)
theta_2 <- matrix(c(-2, 1), ncol = 2)
# Define sigmoid function
g <- function(z) {
return (1/(1 + exp(-z)))
}
# Define threshold function
# g <- function(z) {
#   return (ifelse(z >= 0, 1, 0))
# }
# error_log <- data.frame("iter" = numeric(), "val" = numeric())
# for (j in 0:10000) {
#   e <- 0;
#   eta <- 0.01 #learning rate
#
#   for (i in sample(c(1,2,3,4))) {
#     a_2 <- g(theta_1%*%x[i,])
#     a_3 <- g(theta_2%*%a_2)
#
#     # Define delta_3
#     delta_3 <- a_3 - y[i,]
#     # delta_2
#     delta_2 <- (t(theta_2)%*%delta_3)*(a_2*(1-a_2))
#
#     # Mean square error
#     e <- e + (delta_3)^2
#
#     # print(as.character(signif(delta_3)), 2)
#
#     theta_1 <- theta_1 - eta*delta_2%*%x[i,]
#     theta_2 <- theta_2 - eta*t(a_2%*%t(delta_3))
#   }
#   e <- sqrt(e/4)
#   if ((j%%100) == 0) {
#     error_log <- rbind(error_log, c(j, e))
#   }
# }
# names(error_log) <- c("iter", "val")
# error_log
################################################################################
# FEED FORWARD
################################################################################
s1 <- theta_1%*%t(x)
a1 <- g(s1)
s2 <- theta_2%*%a1
a2 <- g(s2)
# Predicted values
pred <- a2
pred
################################################################################
# LIBRARY
################################################################################
library(ggplot2)
################################################################################
# GENERATE DATA
################################################################################
# Manually generate x1 AND x2 = y dataset
# x0 is a bias unit and equals to 1
dt <- data.frame(x0 = c(1, 1, 1, 1),
x1 = c(1, 1, 0, 0),
x2 = c(1, 0, 1, 0),
y = c(0, 1, 1, 0))
# Input
x <- as.matrix(dt[,1:3])
# Output
y <- as.matrix(dt[, 4])
################################################################################
# PLOT
################################################################################
ggplot(data = dt,
mapping = aes(x = x1, y = x2, shape = as.factor(y),
colour = as.factor(y))) +
geom_point(size = 5) +
geom_hline(yintercept = 0, size = 0.5) +
geom_vline(xintercept = 0, size = 0.5) +
coord_cartesian(xlim = c(-0.25, 1.5), ylim = c(-0.25, 1.5)) +
theme(legend.title=element_blank()) +
labs(x = "x", y = "y")
ggsave("figs/xor.png")
################################################################################
# BACKPROPAGATION
################################################################################
# Initial theta values
theta_1 <- matrix(c(-1.5, 1, 1, -0.5, 1, 1),
ncol = 3, nrow = 2, byrow = TRUE)
theta_2 <- matrix(c(-2, 1), ncol = 2)
# Define sigmoid function
# g <- function(z) {
#   return (1/(1 + exp(-z)))
# }
# Define threshold function
g <- function(z) {
return (ifelse(z >= 0, 1, 0))
}
# error_log <- data.frame("iter" = numeric(), "val" = numeric())
# for (j in 0:10000) {
#   e <- 0;
#   eta <- 0.01 #learning rate
#
#   for (i in sample(c(1,2,3,4))) {
#     a_2 <- g(theta_1%*%x[i,])
#     a_3 <- g(theta_2%*%a_2)
#
#     # Define delta_3
#     delta_3 <- a_3 - y[i,]
#     # delta_2
#     delta_2 <- (t(theta_2)%*%delta_3)*(a_2*(1-a_2))
#
#     # Mean square error
#     e <- e + (delta_3)^2
#
#     # print(as.character(signif(delta_3)), 2)
#
#     theta_1 <- theta_1 - eta*delta_2%*%x[i,]
#     theta_2 <- theta_2 - eta*t(a_2%*%t(delta_3))
#   }
#   e <- sqrt(e/4)
#   if ((j%%100) == 0) {
#     error_log <- rbind(error_log, c(j, e))
#   }
# }
# names(error_log) <- c("iter", "val")
# error_log
################################################################################
# FEED FORWARD
################################################################################
s1 <- theta_1%*%t(x)
a1 <- g(s1)
s2 <- theta_2%*%a1
a2 <- g(s2)
# Predicted values
pred <- a2
pred
################################################################################
# LIBRARY
################################################################################
library(ggplot2)
################################################################################
# GENERATE DATA
################################################################################
# Manually generate x1 AND x2 = y dataset
# x0 is a bias unit and equals to 1
dt <- data.frame(x0 = c(1, 1, 1, 1),
x1 = c(1, 1, 0, 0),
x2 = c(1, 0, 1, 0),
y = c(0, 1, 1, 0))
# Input
x <- as.matrix(dt[,1:3])
# Output
y <- as.matrix(dt[, 4])
################################################################################
# PLOT
################################################################################
ggplot(data = dt,
mapping = aes(x = x1, y = x2, shape = as.factor(y),
colour = as.factor(y))) +
geom_point(size = 5) +
geom_hline(yintercept = 0, size = 0.5) +
geom_vline(xintercept = 0, size = 0.5) +
coord_cartesian(xlim = c(-0.25, 1.5), ylim = c(-0.25, 1.5)) +
theme(legend.title=element_blank()) +
labs(x = "x", y = "y")
ggsave("figs/xor.png")
################################################################################
# BACKPROPAGATION
################################################################################
# Initial theta values
theta_1 <- matrix(c(-1.5, 1, 1, -0.5, 1, 1),
ncol = 3, nrow = 2, byrow = TRUE)
theta_2 <- matrix(c(-2, 1), ncol = 2)
# Define sigmoid function
# g <- function(z) {
#   return (1/(1 + exp(-z)))
# }
# Define threshold function
g <- function(z) {
return (ifelse(z >= 0, 1, 0))
}
# error_log <- data.frame("iter" = numeric(), "val" = numeric())
# for (j in 0:10000) {
#   e <- 0;
#   eta <- 0.01 #learning rate
#
#   for (i in sample(c(1,2,3,4))) {
#     a_2 <- g(theta_1%*%x[i,])
#     a_3 <- g(theta_2%*%a_2)
#
#     # Define delta_3
#     delta_3 <- a_3 - y[i,]
#     # delta_2
#     delta_2 <- (t(theta_2)%*%delta_3)*(a_2*(1-a_2))
#
#     # Mean square error
#     e <- e + (delta_3)^2
#
#     # print(as.character(signif(delta_3)), 2)
#
#     theta_1 <- theta_1 - eta*delta_2%*%x[i,]
#     theta_2 <- theta_2 - eta*t(a_2%*%t(delta_3))
#   }
#   e <- sqrt(e/4)
#   if ((j%%100) == 0) {
#     error_log <- rbind(error_log, c(j, e))
#   }
# }
# names(error_log) <- c("iter", "val")
# error_log
################################################################################
# FEED FORWARD
################################################################################
s1 <- theta_1%*%t(x)
a1 <- g(s1)
s2 <- theta_2%*%a1
a2 <- g(s2)
# Predicted values
pred <- a2
pred
